\contentsline {section}{\numberline {5}Week}{6}{section.5}%
\contentsline {subsection}{\numberline {5.1}For each function $f(n)$ and time $t$ in the following table, determine the alrgest size $n$ of a problem that can be solved in time $t$, assuming that the algorithm to solve the problem takes $f(n)$ 1 nanosecond}{6}{subsection.5.1}%
\contentsline {subsection}{\numberline {5.2}Show that in a puzzle where two peices is switched with $n$ pieces in all wrong positions, it requires at minimum of $n/2$ switches to solve the puzzle}{6}{subsection.5.2}%
\contentsline {subsection}{\numberline {5.3}Create a puzzle with 4 pieces, and find a sequence of switches, but where not every switch moves at least one piece to its correct position}{6}{subsection.5.3}%
\contentsline {subsection}{\numberline {5.4}Create an algorithm which can find cycles in a given puzzle}{7}{subsection.5.4}%
\contentsline {subsection}{\numberline {5.5}Use the algorithm implementation to calculate statistic over the amount of cycles in a 16 long permutation}{7}{subsection.5.5}%
\contentsline {subsection}{\numberline {5.6}Write insertion sort pseudo code}{7}{subsection.5.6}%
\contentsline {section}{\numberline {6}Week}{8}{section.6}%
\contentsline {subsection}{\numberline {6.1}What is the average and worst case run time og linear search aglorithm with the element placed randomly}{8}{subsection.6.1}%
\contentsline {subsection}{\numberline {6.2}Let an inversion be that in an array if $i<j$ and $A[i]>A[j]$}{8}{subsection.6.2}%
\contentsline {subsubsection}{\numberline {6.2.a}Find inversion pairs in $\{2,3,8,6,1\}$}{8}{subsubsection.6.2.1}%
\contentsline {subsubsection}{\numberline {6.2.b}For which array will it have the most inverse pairs and how many in an array of length $n$}{8}{subsubsection.6.2.2}%
\contentsline {subsubsection}{\numberline {6.2.c}What is the relation between inversion pairs and insertion sort}{8}{subsubsection.6.2.3}%
\contentsline {subsection}{\numberline {6.3}Analyse the run time of insertion sort, in best case, worst case and random case}{8}{subsection.6.3}%
\contentsline {subsection}{\numberline {6.4}Find an algorithm which for a array with integers if there exists a pair which sum is equal to $x$}{9}{subsection.6.4}%
\contentsline {subsection}{\numberline {6.5}Illustrate merge sort using the array $A=\{3,41,52,26,38,57,9,49\}$}{9}{subsection.6.5}%
\contentsline {subsection}{\numberline {6.6}Show that for $f(n)=0.1n^2+5n+25$ that $f(n)=\Theta (n^2)$ and $f(n)=o(n^3)$}{9}{subsection.6.6}%
\contentsline {subsection}{\numberline {6.7}Prove that $max(f(n),g(n))=\Theta (f(n)+g(n))$}{10}{subsection.6.7}%
\contentsline {subsection}{\numberline {6.8}Draw binary search, write pseudo code and then code}{10}{subsection.6.8}%
\contentsline {subsection}{\numberline {6.9}How can binary search be used to optimize linear search to $O(n\qopname \relax o{log}_2n)$?}{11}{subsection.6.9}%
\contentsline {subsection}{\numberline {6.10}Is $2^{n+1}=O(2^n)$? Is $2^{2n}=O(2^n)$?}{11}{subsection.6.10}%
\contentsline {subsection}{\numberline {6.11}Prove $\qopname \relax o{log}(n!)=\Theta (n\qopname \relax o{log}n)$}{11}{subsection.6.11}%
\contentsline {subsection}{\numberline {6.12}Prove $n!=\omega (2^n)$}{11}{subsection.6.12}%
\contentsline {subsection}{\numberline {6.13}Prove $n!=o(n^n)$}{11}{subsection.6.13}%
\contentsline {section}{\numberline {7}Week}{11}{section.7}%
\contentsline {subsection}{\numberline {7.1}Rank the function speed from fastest growing to slowing}{11}{subsection.7.1}%
\contentsline {subsection}{\numberline {7.2}If $f_1(n)\in O(g_1(n))$ and $f_2(n)\in O(g_2(n))$ which statements is true}{12}{subsection.7.2}%
\contentsline {subsection}{\numberline {7.3}Describe an algorithm which find the number of tuples in an array which has a lower value than another element but higher index in the run time $n\qopname \relax o{log}_2n$}{13}{subsection.7.3}%
\contentsline {subsection}{\numberline {7.4}Which of the following statements are true}{13}{subsection.7.4}%
\contentsline {section}{\numberline {8}Week}{13}{section.8}%
\contentsline {subsection}{\numberline {8.1}Illustrate the partitioning in quick sort on the following array}{13}{subsection.8.1}%
\contentsline {subsection}{\numberline {8.2}In an array with only the same value, where will quick sort return the middle value}{14}{subsection.8.2}%
\contentsline {subsection}{\numberline {8.3}What is the run time of quick sort on the array of the same value}{14}{subsection.8.3}%
\contentsline {subsection}{\numberline {8.4}Is an sorted array a min-heap}{14}{subsection.8.4}%
\contentsline {subsection}{\numberline {8.5}Is the following array a max-heap?}{15}{subsection.8.5}%
\contentsline {subsection}{\numberline {8.6}Insert 9 into the following max-heap tree}{15}{subsection.8.6}%
\contentsline {subsection}{\numberline {8.7}Insert 2 into the following min-heap}{15}{subsection.8.7}%
\contentsline {subsection}{\numberline {8.8}Illustrate Max-Heapify($A$,2) on the following array}{15}{subsection.8.8}%
\contentsline {subsection}{\numberline {8.9}Use Heap-Extract-Max(A) on the following array}{16}{subsection.8.9}%
\contentsline {subsection}{\numberline {8.10}Where in a max heap will the smallest element reside}{16}{subsection.8.10}%
\contentsline {subsection}{\numberline {8.11}Find all mini-heaps with the elements 1,2,3,4}{16}{subsection.8.11}%
\contentsline {subsection}{\numberline {8.12}Prove that the childrens index relative to the parent is index times two and index times two plus 1}{17}{subsection.8.12}%
\contentsline {subsection}{\numberline {8.13}Analysis if d-ary heap}{17}{subsection.8.13}%
\contentsline {subsubsection}{\numberline {8.13.a}What would be the array representation}{17}{subsubsection.8.13.1}%
\contentsline {subsubsection}{\numberline {8.13.b}What is the height of a tree with n elements with d children}{17}{subsubsection.8.13.2}%
\contentsline {subsubsection}{\numberline {8.13.c}Rewrite heap sort such it works with d-ary heaps}{17}{subsubsection.8.13.3}%
\contentsline {section}{\numberline {9}Week}{18}{section.9}%
\contentsline {subsection}{\numberline {9.1}Show that the worst-case running time of Heapsort is $\Omega (n\qopname \relax o{log}n)$}{18}{subsection.9.1}%
\contentsline {subsection}{\numberline {9.2}Illustrate counting sort}{18}{subsection.9.2}%
\contentsline {subsection}{\numberline {9.3}In the following code for counting sort, will it still work if line 9 got switched such it went from 1 to $A.length$}{18}{subsection.9.3}%
\contentsline {subsection}{\numberline {9.4}Make an algorithm which in constant time can answer amount of elements in a range, with a preprocess time of $\Theta (n+k)$}{19}{subsection.9.4}%
\contentsline {subsection}{\numberline {9.5}Which of the following sorting algorithms are stable and unstable, and how could they be stable}{19}{subsection.9.5}%
\contentsline {subsubsection}{\numberline {9.5.a}Insertion sort}{19}{subsubsection.9.5.1}%
\contentsline {subsubsection}{\numberline {9.5.b}Merge sort}{19}{subsubsection.9.5.2}%
\contentsline {subsubsection}{\numberline {9.5.c}Heapsort}{20}{subsubsection.9.5.3}%
\contentsline {subsubsection}{\numberline {9.5.d}Quicksort}{20}{subsubsection.9.5.4}%
\contentsline {subsection}{\numberline {9.6}Perform radis sort on the following inputs}{20}{subsection.9.6}%
\contentsline {subsubsection}{\numberline {9.6.a}Numbers}{20}{subsubsection.9.6.1}%
\contentsline {subsubsection}{\numberline {9.6.b}Letters}{21}{subsubsection.9.6.2}%
\contentsline {subsection}{\numberline {9.7}Tail recursive quicsort}{21}{subsection.9.7}%
\contentsline {subsubsection}{\numberline {9.7.a}Argue that the given version works}{21}{subsubsection.9.7.1}%
\contentsline {subsubsection}{\numberline {9.7.b}Describe how the stack amount could be $n$}{21}{subsubsection.9.7.2}%
\contentsline {subsubsection}{\numberline {9.7.c}How could the stack call be less}{21}{subsubsection.9.7.3}%
\contentsline {section}{\numberline {10}Week}{22}{section.10}%
\contentsline {subsection}{\numberline {10.1}In the following formula, what is the best sequence such its as close to $w$ when $w=7$}{22}{subsection.10.1}%
\contentsline {subsection}{\numberline {10.2}Which of these are not a possible search sequence for 363 in a binary tree of 1 to 1000}{22}{subsection.10.2}%
\contentsline {subsubsection}{\numberline {10.2.a}$2,252,401,398,330,344,397,363$}{22}{subsubsection.10.2.1}%
\contentsline {subsubsection}{\numberline {10.2.b}$924,220,911,244,898,258,362,363$}{22}{subsubsection.10.2.2}%
\contentsline {subsubsection}{\numberline {10.2.c}$925,202,911,240,912,245,363$}{22}{subsubsection.10.2.3}%
\contentsline {subsection}{\numberline {10.3}Write code to find the predecessor / ordered node before}{22}{subsection.10.3}%
\contentsline {subsection}{\numberline {10.4}Draw a red black tree insert of 36}{22}{subsection.10.4}%
\contentsline {subsection}{\numberline {10.5}What is the worst run time of an unbalanced tree, for a sorted list}{23}{subsection.10.5}%
\contentsline {subsection}{\numberline {10.6}What is the worst run time of a balanced red-black tree, for a sorted list}{24}{subsection.10.6}%
\contentsline {subsection}{\numberline {10.7}Argue that sorting $n$ elements with binary tree will take $\Omega (n\qopname \relax o{log}n)$}{24}{subsection.10.7}%
\contentsline {subsection}{\numberline {10.8}What is the difference between binary search tree and min-heap}{24}{subsection.10.8}%
\contentsline {subsection}{\numberline {10.9}Describe a range search for the binary tree, with the run time $\Theta (m+\qopname \relax o{log}n)$}{24}{subsection.10.9}%
\contentsline {section}{\numberline {11}Week}{24}{section.11}%
\contentsline {subsection}{\numberline {11.1}Insert 18 and 26 into the given hashtable with linear opening}{24}{subsection.11.1}%
\contentsline {subsection}{\numberline {11.2}Insert 5,28,19,15,20,33,12,17,10 into a hash table with 9 slots and $h(x)=x$ mod 9, as a chain}{25}{subsection.11.2}%
\contentsline {subsection}{\numberline {11.3}Perform hashing function on 10,22,31,4,15 with linear,quadratic, and double hashing, on mod 11 table}{25}{subsection.11.3}%
\contentsline {section}{\numberline {12}Week}{26}{section.12}%
\contentsline {subsection}{\numberline {12.1}In a tree which stores the number of children, how to find the $i$ successor to a node?}{26}{subsection.12.1}%
\contentsline {subsection}{\numberline {12.2}Find the number of occurences of $i < j$ and $A[i] > A[j]$ in a given array in $O(n \qopname \relax o{log}n)$}{26}{subsection.12.2}%
\contentsline {subsection}{\numberline {12.3}For the following factorial code which invariants are true}{26}{subsection.12.3}%
\contentsline {subsection}{\numberline {12.4}Solve the recursion using the master theorum}{27}{subsection.12.4}%
\contentsline {subsubsection}{\numberline {12.4.a}$T(n)=4\cdot T(n/3)+n$}{27}{subsubsection.12.4.1}%
\contentsline {subsubsection}{\numberline {12.4.b}$T(n)=T(n/2)+n^2$}{27}{subsubsection.12.4.2}%
\contentsline {subsubsection}{\numberline {12.4.c}$T(n)=16\cdot T(n/2)+n^4+n^2$}{27}{subsubsection.12.4.3}%
\contentsline {section}{\numberline {13}Week}{27}{section.13}%
\contentsline {subsection}{\numberline {13.1}Solve the recursion using the master theorum}{27}{subsection.13.1}%
\contentsline {subsubsection}{\numberline {13.1.a}$T(n)=2\cdot T(n/4)+1$}{27}{subsubsection.13.1.1}%
\contentsline {subsubsection}{\numberline {13.1.b}$T(n)=2T(n-1)+n$}{27}{subsubsection.13.1.2}%
\contentsline {subsection}{\numberline {13.2}Rethink insertion sort as a recursive algorithm and find run time}{27}{subsection.13.2}%
\contentsline {subsection}{\numberline {13.3}Use strassens algorithm on the following two matrices}{28}{subsection.13.3}%
\contentsline {subsection}{\numberline {13.4}Find the upper and lower bound using the master theorem}{28}{subsection.13.4}%
\contentsline {section}{\numberline {14}Week}{28}{section.14}%
\contentsline {subsection}{\numberline {14.1}Master theoreom on recursions}{28}{subsection.14.1}%
\contentsline {subsubsection}{\numberline {14.1.a}Solve the recursions}{29}{subsubsection.14.1.1}%
\contentsline {subsection}{\numberline {14.2}True or false?}{29}{subsection.14.2}%
\contentsline {section}{\numberline {15}Week}{29}{section.15}%
\contentsline {subsection}{\numberline {15.1}Create huffman tree from the following data}{29}{subsection.15.1}%
\contentsline {subsection}{\numberline {15.2}Describe an algorithm whihc find schedules and amount of room needed for lectures}{30}{subsection.15.2}%
\contentsline {subsection}{\numberline {15.3}Argue that just taking the shortest lecture will not work, what about least overlapping?}{30}{subsection.15.3}%
\contentsline {subsection}{\numberline {15.4}Describe an algorithm which finds the shortest span of sums between given points}{31}{subsection.15.4}%
\contentsline {subsection}{\numberline {15.5}Prove that in a file of characters the huffman algorithm will not be compressed if the highest frequency is less than half of least frequent}{31}{subsection.15.5}%
