\relax 
\providecommand\hyper@newdestlabel[2]{}
\providecommand\HyperFirstAtBeginDocument{\AtBeginDocument}
\HyperFirstAtBeginDocument{\ifx\hyper@anchor\@undefined
\global\let\oldcontentsline\contentsline
\gdef\contentsline#1#2#3#4{\oldcontentsline{#1}{#2}{#3}}
\global\let\oldnewlabel\newlabel
\gdef\newlabel#1#2{\newlabelxx{#1}#2}
\gdef\newlabelxx#1#2#3#4#5#6{\oldnewlabel{#1}{{#2}{#3}}}
\AtEndDocument{\ifx\hyper@anchor\@undefined
\let\contentsline\oldcontentsline
\let\newlabel\oldnewlabel
\fi}
\fi}
\global\let\hyper@last\relax 
\gdef\HyperFirstAtBeginDocument#1{#1}
\providecommand\HyField@AuxAddToFields[1]{}
\providecommand\HyField@AuxAddToCoFields[2]{}
\@writefile{toc}{\contentsline {section}{\numberline {5}Week}{4}{section.5}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {5.1}For each function $f(n)$ and time $t$ in the following table, determine the alrgest size $n$ of a problem that can be solved in time $t$, assuming that the algorithm to solve the problem takes $f(n)$ 1 nanosecond}{4}{subsection.5.1}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {5.2}Show that in a puzzle where two peices is switched with $n$ pieces in all wrong positions, it requires at minimum of $n/2$ switches to solve the puzzle}{4}{subsection.5.2}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {5.3}Create a puzzle with 4 pieces, and find a sequence of switches, but where not every switch moves at least one piece to its correct position}{4}{subsection.5.3}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {5.4}Create an algorithm which can find cycles in a given puzzle}{5}{subsection.5.4}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {5.5}Use the algorithm implementation to calculate statistic over the amount of cycles in a 16 long permutation}{5}{subsection.5.5}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {1}{\ignorespaces Statistic from puzzleSolve/data.csv\relax }}{5}{figure.caption.4}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {5.6}Write insertion sort pseudo code}{5}{subsection.5.6}\protected@file@percent }
\@writefile{toc}{\contentsline {section}{\numberline {6}Week}{6}{section.6}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {6.1}What is the average and worst case run time og linear search aglorithm with the element placed randomly}{6}{subsection.6.1}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {6.2}Let an inversion be that in an array if $i<j$ and $A[i]>A[j]$}{6}{subsection.6.2}\protected@file@percent }
\@writefile{toc}{\contentsline {subsubsection}{\numberline {6.2.a}Find inversion pairs in $\{2,3,8,6,1\}$}{6}{subsubsection.6.2.1}\protected@file@percent }
\@writefile{toc}{\contentsline {subsubsection}{\numberline {6.2.b}For which array will it have the most inverse pairs and how many in an array of length $n$}{6}{subsubsection.6.2.2}\protected@file@percent }
\@writefile{toc}{\contentsline {subsubsection}{\numberline {6.2.c}What is the relation between inversion pairs and insertion sort}{6}{subsubsection.6.2.3}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {6.3}Analyse the run time of insertion sort, in best case, worst case and random case}{6}{subsection.6.3}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {6.4}Find an algorithm which for a array with integers if there exists a pair which sum is equal to $x$}{7}{subsection.6.4}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {6.5}Illustrate merge sort using the array $A=\{3,41,52,26,38,57,9,49\}$}{7}{subsection.6.5}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {2}{\ignorespaces Illustration of merge sort\relax }}{7}{figure.caption.5}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {6.6}Show that for $f(n)=0.1n^2+5n+25$ that $f(n)=\Theta (n^2)$ and $f(n)=o(n^3)$}{7}{subsection.6.6}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {6.7}Prove that $max(f(n),g(n))=\Theta (f(n)+g(n))$}{8}{subsection.6.7}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {6.8}Draw binary search, write pseudo code and then code}{8}{subsection.6.8}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {3}{\ignorespaces Illustration of binary search\relax }}{8}{figure.caption.6}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {6.9}How can binary search be used to optimize linear search to $O(n\qopname  \relax o{log}_2n)$?}{9}{subsection.6.9}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {6.10}Is $2^{n+1}=O(2^n)$? Is $2^{2n}=O(2^n)$?}{9}{subsection.6.10}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {6.11}Prove $\qopname  \relax o{log}(n!)=\Theta (n\qopname  \relax o{log}n)$}{9}{subsection.6.11}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {6.12}Prove $n!=\omega (2^n)$}{9}{subsection.6.12}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {6.13}Prove $n!=o(n^n)$}{9}{subsection.6.13}\protected@file@percent }
\gdef \@abspage@last{9}
